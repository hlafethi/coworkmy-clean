const { DatabaseMigrator, databases } = require('./migrate-database.js');

async function testMultiDatabase() {
  console.log('üß™ Test du syst√®me multi-base de donn√©es\n');

  const migrator = new DatabaseMigrator();

  // Test 1: V√©rifier les configurations
  console.log('üìã 1. V√©rification des configurations...');
  for (const [name, config] of Object.entries(databases)) {
    console.log(`   ${name}: ${config.type} - ${config.host}:${config.port}`);
  }

  // Test 2: Tester les connexions
  console.log('\nüîå 2. Test des connexions...');
  const connectionResults = {};
  
  for (const [name, config] of Object.entries(databases)) {
    console.log(`\n   Test de ${name}...`);
    const isConnected = await migrator.testConnection(config);
    connectionResults[name] = isConnected;
  }

  // Test 3: Afficher le r√©sum√©
  console.log('\nüìä 3. R√©sum√© des connexions:');
  for (const [name, isConnected] of Object.entries(connectionResults)) {
    const status = isConnected ? '‚úÖ Connect√©' : '‚ùå √âchec';
    console.log(`   ${name}: ${status}`);
  }

  // Test 4: Recommandations
  console.log('\nüí° 4. Recommandations:');
  
  if (connectionResults.supabase) {
    console.log('   ‚úÖ Supabase: Fonctionnel - Id√©al pour le d√©veloppement');
  } else {
    console.log('   ‚ùå Supabase: Probl√®me de connexion - V√©rifiez les variables d\'environnement');
  }

  if (connectionResults.o2switch) {
    console.log('   ‚úÖ O2Switch PostgreSQL: Fonctionnel - Bonne alternative gratuite');
  } else {
    console.log('   ‚ö†Ô∏è  O2Switch PostgreSQL: Port 5432 ferm√© - Utilisez phpPgAdmin');
  }

  if (connectionResults.mysql) {
    console.log('   ‚úÖ MySQL: Fonctionnel - Alternative classique');
  } else {
    console.log('   ‚ö†Ô∏è  MySQL: Port 3306 ferm√© - Utilisez phpMyAdmin');
  }

  // Test 5: Instructions de migration
  console.log('\nüìù 5. Instructions de migration:');
  
  if (connectionResults.supabase && (connectionResults.o2switch || connectionResults.mysql)) {
    console.log('   üöÄ Migration possible:');
    if (connectionResults.o2switch) {
      console.log('      node scripts/migrate-database.js migrate supabase o2switch');
    }
    if (connectionResults.mysql) {
      console.log('      node scripts/migrate-database.js migrate supabase mysql');
    }
  } else {
    console.log('   ‚ö†Ô∏è  Migration manuelle requise:');
    console.log('      1. Utilisez phpPgAdmin pour O2Switch');
    console.log('      2. Utilisez phpMyAdmin pour MySQL');
    console.log('      3. Ex√©cutez les scripts SQL fournis');
  }

  // Test 6: V√©rification des scripts
  console.log('\nüìÑ 6. V√©rification des scripts SQL:');
  
  const fs = require('fs');
  const scripts = [
    'scripts/migrate-o2switch-simple.sql',
    'scripts/migrate-to-mysql.sql'
  ];

  for (const script of scripts) {
    if (fs.existsSync(script)) {
      console.log(`   ‚úÖ ${script} - Disponible`);
    } else {
      console.log(`   ‚ùå ${script} - Manquant`);
    }
  }

  console.log('\nüéØ 7. Prochaines √©tapes:');
  console.log('   1. Configurez vos variables d\'environnement');
  console.log('   2. Ex√©cutez les scripts SQL dans phpPgAdmin/phpMyAdmin');
  console.log('   3. Testez l\'interface de s√©lection de base');
  console.log('   4. Migrez vos donn√©es si n√©cessaire');

  console.log('\n‚ú® Test termin√© !');
}

// Ex√©cuter le test
if (require.main === module) {
  testMultiDatabase().catch(console.error);
}

module.exports = { testMultiDatabase }; 