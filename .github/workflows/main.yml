# test commit for artifact v4
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  SERVER_HOST: ${{ secrets.SERVER_HOST }}
  SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
  SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
  SERVER_SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run linter
        run: npm run lint || true
      - name: Run tests
        run: npm test || true
      - name: Run accessibility tests
        run: npm run test:a11y || true

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
      - name: List build contents
        run: ls -la dist/
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: dist/

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build
          path: dist/
      - name: List downloaded files
        run: ls -la dist/
      - name: Deploy to Staging
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USERNAME }}
          password: ${{ env.SERVER_PASSWORD }}
          key: ${{ env.SERVER_SSH_KEY }}
          source: "dist/"
          target: "/home/sc2rafi0640/www/staging.canard-cowork.com"
          strip_components: 0
      - name: Post-deploy commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USERNAME }}
          password: ${{ env.SERVER_PASSWORD }}
          key: ${{ env.SERVER_SSH_KEY }}
          script: |
            echo "Current directory: $(pwd)"
            echo "Listing target directory:"
            ls -la /home/sc2rafi0640/www/staging.canard-cowork.com
            cd /home/sc2rafi0640/www/staging.canard-cowork.com
            echo "Installing dependencies..."
            npm install --production
            echo "Starting/Restarting application..."
            pm2 restart staging-app || pm2 start npm --name "staging-app" -- start
            echo "PM2 status:"
            pm2 list

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build
          path: dist/
      - name: List downloaded files
        run: ls -la dist/
      - name: Deploy to Production
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USERNAME }}
          password: ${{ env.SERVER_PASSWORD }}
          key: ${{ env.SERVER_SSH_KEY }}
          source: "dist/"
          target: "/home/sc2rafi0640/www/canard-cowork.com"
          strip_components: 0
      - name: Post-deploy commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USERNAME }}
          password: ${{ env.SERVER_PASSWORD }}
          key: ${{ env.SERVER_SSH_KEY }}
          script: |
            echo "Current directory: $(pwd)"
            echo "Listing target directory:"
            ls -la /home/sc2rafi0640/www/canard-cowork.com
            cd /home/sc2rafi0640/www/canard-cowork.com
            echo "Installing dependencies..."
            npm install --production
            echo "Starting/Restarting application..."
            pm2 restart production-app || pm2 start npm --name "production-app" -- start
            echo "PM2 status:"
            pm2 list
