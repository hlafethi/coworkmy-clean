import { apiClient } from "@/lib/api-client";
import { logger } from '@/utils/logger';

export interface FAQ {
  id: string;
  question: string;
  answer: string;
  category: string;
  order_index: number;
}

export interface KBArticle {
  id: number;
  title: string;
  content: string;
  category: string;
  tags: string[];
  is_published: boolean;
  author_id: string;
  author_name?: string;
  author_email?: string;
  created_at: string;
  updated_at: string;
}

export interface SupportTicket {
  id: string;
  user_id: string;
  subject: string;
  message: string;
  priority: string;
  status: string;
  created_at: string;
  updated_at?: string;
}

// Interfaces de chat supprim√©es

export class SupportService {
  // R√©cup√©rer les FAQ
  static async getFAQs(): Promise<FAQ[]> {
    try {
      const response = await apiClient.get('/support/faqs');
      if (!response.success) {
        throw new Error(response.error || 'Erreur lors de la r√©cup√©ration des FAQ');
      }
      return response.data || [];
    } catch (error) {
      logger.error('Erreur r√©cup√©ration FAQ:', error);
      throw error;
    }
  }

  // R√©cup√©rer les articles de base de connaissances
  static async getKBArticles(): Promise<KBArticle[]> {
    try {
      const response = await apiClient.get('/support/kb-articles');
      if (!response.success) {
        throw new Error(response.error || 'Erreur lors de la r√©cup√©ration des articles');
      }
      return response.data || [];
    } catch (error) {
      logger.error('Erreur r√©cup√©ration articles KB:', error);
      throw error;
    }
  }

  // R√©cup√©rer les tickets de l'utilisateur
  static async getUserTickets(): Promise<SupportTicket[]> {
    try {
      const response = await apiClient.get('/support/tickets');
      if (!response.success) {
        throw new Error(response.error || 'Erreur lors de la r√©cup√©ration des tickets');
      }
      return response.data || [];
    } catch (error) {
      logger.error('Erreur r√©cup√©ration tickets:', error);
      throw error;
    }
  }

  // Cr√©er un nouveau ticket
  static async createTicket(ticketData: {
    subject: string;
    message: string;
    priority?: string;
  }): Promise<SupportTicket> {
    try {
      logger.debug('üîç SupportService: Cr√©ation d\'un ticket avec authentification');
      logger.debug('üìù Donn√©es envoy√©es:', ticketData);
      
      const response = await apiClient.post('/support/tickets', ticketData);
      
      if (!response.success) {
        throw new Error(response.error || 'Erreur lors de la cr√©ation du ticket');
      }
      
      logger.debug('üìù Ticket cr√©√© avec succ√®s:', response.data);
      return response.data;
    } catch (error) {
      logger.error('Erreur cr√©ation ticket:', error);
      throw error;
    }
  }

  // M√©thodes de chat supprim√©es

  static async getTicketResponses(ticketId: string): Promise<any[]> {
    try {
      logger.debug('üîç SupportService: R√©cup√©ration des r√©ponses avec authentification');
      logger.debug('üìù Ticket ID:', ticketId);
      
      const response = await apiClient.get(`/support/tickets/${ticketId}/responses`);
      
      if (!response.success) {
        throw new Error(response.error || 'Erreur lors de la r√©cup√©ration des r√©ponses');
      }
      
      logger.debug('üìù R√©ponses r√©cup√©r√©es:', response.data);
      return response.data || [];
    } catch (error) {
      logger.error('Erreur r√©cup√©ration r√©ponses ticket:', error);
      throw error;
    }
  }

  static async addTicketResponse(ticketId: string, message: string): Promise<any> {
    try {
      logger.debug('üîç SupportService: Ajout d\'une r√©ponse avec authentification');
      logger.debug('üìù Donn√©es envoy√©es:', { ticketId, message });
      
      const response = await apiClient.post(`/support/tickets/${ticketId}/responses`, { message });
      
      if (!response.success) {
        throw new Error(response.error || 'Erreur lors de l\'ajout de la r√©ponse');
      }
      
      logger.debug('üìù R√©ponse ajout√©e avec succ√®s:', response.data);
      return response.data;
    } catch (error) {
      logger.error('Erreur ajout r√©ponse ticket:', error);
      throw error;
    }
  }
}
